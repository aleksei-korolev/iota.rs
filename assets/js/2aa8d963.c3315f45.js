(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[6],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(t),m=s,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return t?a.createElement(h,r(r({ref:n},c),{},{components:t})):a.createElement(h,r({ref:n},c))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,r=new Array(i);r[0]=p;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,r[1]=o;for(var d=2;d<i;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7191:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var a=t(2122),s=t(9756),i=(t(7294),t(3905)),r=["components"],o={},l="Examples",d={unversionedId:"libraries/rust/examples",id:"libraries/rust/examples",isDocsHomePage:!1,title:"Examples",description:"It's possible to send transactions with iota.rs, but we strongly recommend to use official wallet.rs library together with stronghold.rs enclave for value-based transfers. This combination incorporates the best security practices while dealing with seeds, related addresses and UTXO. See more information on wallet docs.",source:"@site/docs/libraries/rust/examples.md",sourceDirName:"libraries/rust",slug:"/libraries/rust/examples",permalink:"/libraries/rust/examples",editUrl:"https://github.com/iotaledger/iota.rs/tree/dev/documentation/docs/libraries/rust/examples.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Getting Started with Rust",permalink:"/libraries/rust/getting_started"},next:{title:"API Reference",permalink:"/libraries/rust/api_reference"}},c=[],u={toc:c};function p(e){var n=e.components,t=(0,s.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"examples"},"Examples"),(0,i.kt)("p",null,"It's possible to send transactions with iota.rs, but we strongly recommend to use official ",(0,i.kt)("inlineCode",{parentName:"p"},"wallet.rs")," library together with ",(0,i.kt)("inlineCode",{parentName:"p"},"stronghold.rs")," enclave for value-based transfers. This combination incorporates the best security practices while dealing with seeds, related addresses and ",(0,i.kt)("inlineCode",{parentName:"p"},"UTXO"),". See more information on ",(0,i.kt)("a",{parentName:"p",href:"https://chrysalis.docs.iota.org/libraries/wallet.html"},"wallet docs"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/iotaledger/iota.rs\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cd iota.rs\n")),(0,i.kt)("p",null,"Rename the ",(0,i.kt)("inlineCode",{parentName:"p"},".env.example")," file to ",(0,i.kt)("inlineCode",{parentName:"p"},".env"),"."),(0,i.kt)("p",null,"Run the examples like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --example 01_get_info --release\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 01_get_info --release\n\nuse iota_client::Client;\n\n/// In this example we will get information about the node\n\n#[tokio::main]\nasync fn main() {\n    // Create a client instance\n    let iota = Client::builder()\n        .with_node("https://api.lb-0.testnet.chrysalis2.com") // Insert your node URL here\n        // Node with optional authentication\n        // .with_node_auth(\n        //     "https://somechrysalisiotanode.com",\n        //     Some("Some JWT"),\n        //     Some(("name", "password")),\n        // )\n        .unwrap()\n        .finish()\n        .await\n        .unwrap();\n\n    let info = iota.get_info().await.unwrap();\n    println!("Node Info: {:?}", info);\n}\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 02_generate_seed --release\n\nuse iota_client::crypto::signatures::ed25519::SecretKey;\n\n/// In this example we will generate a seed\n\n#[tokio::main]\nasync fn main() {\n    let secret_key = SecretKey::generate().unwrap();\n    println!("{}", hex::encode(&secret_key.to_le_bytes()));\n}\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 03_generate_addresses --release\n\nuse iota_client::{api::GetAddressesBuilder, Client, Seed};\nextern crate dotenv;\nuse dotenv::dotenv;\nuse std::env;\n\n/// In this example we will create addresses from a seed defined in .env\n\n#[tokio::main]\nasync fn main() {\n    // Create a client instance\n    let iota = Client::builder()\n        .with_node("https://api.lb-0.testnet.chrysalis2.com") // Insert your node URL here\n        .unwrap()\n        .finish()\n        .await\n        .unwrap();\n\n    // This example uses dotenv, which is not safe for use in production\n    dotenv().ok();\n\n    let seed = Seed::from_bytes(&hex::decode(env::var("NONSECURE_USE_OF_DEVELOPMENT_SEED_1").unwrap()).unwrap());\n\n    // Generate addresses with default account index and range\n    let addresses = iota.get_addresses(&seed).finish().await.unwrap();\n    println!("List of generated public addresses:\\n{:?}\\n", addresses);\n\n    // Generate addresses with custom account index and range\n    let addresses = iota\n        .get_addresses(&seed)\n        .with_account_index(0)\n        .with_range(0..4)\n        .finish()\n        .await\n        .unwrap();\n\n    println!("List of generated public addresses:\\n{:?}\\n", addresses);\n\n    // Generate public (false) & internal (true) addresses\n    let addresses = iota.get_addresses(&seed).with_range(0..4).get_all().await.unwrap();\n    println!("List of generated public and internal addresses:\\n{:?}\\n", addresses);\n\n    // Generate public addresses offline with the bech32_hrp defined\n    let addresses = GetAddressesBuilder::new(&seed)\n        .with_bech32_hrp("atoi".into())\n        .with_account_index(0)\n        .with_range(0..4)\n        .finish()\n        .await\n        .unwrap();\n\n    println!("List of offline generated public addresses:\\n{:?}\\n", addresses);\n}\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 04_get_balance --release\n\nuse iota_client::{Client, Seed};\nextern crate dotenv;\nuse dotenv::dotenv;\nuse std::env;\n\n/// In this example we will get the account balance of a known seed and the balance and outputs of a known address\n\n#[tokio::main]\nasync fn main() {\n    // Create a client instance\n    let iota = Client::builder()\n        .with_node("https://api.lb-0.testnet.chrysalis2.com") // Insert your node URL here\n        .unwrap()\n        .with_node_sync_disabled()\n        .finish()\n        .await\n        .unwrap();\n\n    // This example uses dotenv, which is not safe for use in production\n    dotenv().ok();\n\n    let seed = Seed::from_bytes(&hex::decode(env::var("NONSECURE_USE_OF_DEVELOPMENT_SEED_1").unwrap()).unwrap());\n\n    let seed_balance = iota.get_balance(&seed).finish().await.unwrap();\n    println!("Account balance: {:?}i\\n", seed_balance);\n\n    let address = "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r";\n\n    let response = iota.get_address().balance(&address).await.unwrap();\n    println!("The balance of {:?} is {:?}i\\n", address, response.balance);\n\n    let outputs = iota.get_address().outputs(&address, Default::default()).await.unwrap();\n\n    println!("The outputs of address {:?} are: {:?}", address, outputs);\n}\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 05_get_address_outputs --release\n\nuse iota_client::{Client, Result};\n\n/// In this example we will get the outputs of a known address\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let iota = Client::builder()\n        .with_node("https://api.lb-0.testnet.chrysalis2.com")?\n        .finish()\n        .await?;\n\n    let address = "atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r";\n\n    let outputs = iota.get_address().outputs(&address, Default::default()).await.unwrap();\n\n    println!("The outputs of address {:?} are: {:?}", address, outputs);\n    Ok(())\n}\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 06_simple_message --release\n\nuse iota_client::{Client, Result};\n\n/// In this example we will send a message without a payload\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let iota = Client::builder()\n        .with_node("https://api.lb-0.testnet.chrysalis2.com")?\n        .finish()\n        .await?;\n\n    let message = iota.message().finish().await?;\n\n    println!(\n        "Empty message sent: https://explorer.iota.org/testnet/message/{}",\n        message.id().0\n    );\n    Ok(())\n}\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 07_get_message_metadata --release\n\nuse iota_client::{Client, Result};\n\n/// In this example we will send a message and get the metadata for it\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let iota = Client::builder()\n        .with_node("https://api.lb-0.testnet.chrysalis2.com")?\n        .finish()\n        .await?;\n\n    let message = iota.message().finish().await?;\n\n    let metadata = iota.get_message().metadata(&message.id().0).await?;\n    println!("Message metadata: {:?}", metadata);\n    Ok(())\n}\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 08_data_message --release\n\nuse iota_client::{Client, Result};\n\n/// In this example we will send a message without a payload\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let iota = Client::builder()\n        .with_node("https://api.lb-0.testnet.chrysalis2.com")?\n        // .with_permanode("http://18.196.167.57:8000/api/permanode/", None, None)?\n        .finish()\n        .await?;\n\n    let message = iota\n        .message()\n        .with_index("Hello")\n        .with_data("Tangle".as_bytes().to_vec())\n        .finish()\n        .await?;\n\n    println!(\n        "Message sent https://explorer.iota.org/testnet/message/{}\\n",\n        message.id().0\n    );\n\n    let fetched_message_ids = iota.get_message().index("Hello").await.unwrap();\n    println!("Messages with Hello index: {:?}", fetched_message_ids);\n    Ok(())\n}\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 09_transaction --release\n\nuse iota_client::{Client, Result, Seed};\nextern crate dotenv;\nuse dotenv::dotenv;\nuse std::env;\n\n/// In this example we will send a transaction\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let iota = Client::builder()\n        .with_node("https://api.lb-0.testnet.chrysalis2.com")?\n        .finish()\n        .await?;\n\n    // This example uses dotenv, which is not safe for use in production\n    // Configure your own seed in ".env". Since the output amount cannot be zero, the seed must contain non-zero balance\n    dotenv().ok();\n    let seed_1 = Seed::from_bytes(&hex::decode(env::var("NONSECURE_USE_OF_DEVELOPMENT_SEED_1").unwrap())?);\n\n    let message = iota\n        .message()\n        .with_seed(&seed_1)\n        // Insert the output address and amount to spent. The amount cannot be zero.\n        .with_output(\n            // We generate an address from our seed so that we send the funds to ourselves\n            &iota.get_addresses(&seed_1).with_range(1..2).finish().await?[0],\n            1_000_000,\n        )?\n        .finish()\n        .await?;\n\n    println!(\n        "Transaction sent: https://explorer.iota.org/testnet/message/{}",\n        message.id().0\n    );\n    Ok(())\n}\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Copyright 2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example 10_mqtt --release\n\nuse iota_client::{bee_message::Message, Client, MqttEvent, Result, Topic};\nuse std::sync::{mpsc::channel, Arc, Mutex};\n\n// Connecting to a MQTT broker using raw ip doesn\'t work with TCP. This is a limitation of rustls.\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // Create a client instance\n    let mut iota = Client::builder()\n        .with_node("https://api.hornet-0.testnet.chrysalis2.com")?\n        .finish()\n        .await?;\n\n    let (tx, rx) = channel();\n    let tx = Arc::new(Mutex::new(tx));\n\n    let mut event_rx = iota.mqtt_event_receiver();\n    tokio::spawn(async move {\n        while event_rx.changed().await.is_ok() {\n            let event = event_rx.borrow();\n            if *event == MqttEvent::Disconnected {\n                println!("mqtt disconnected");\n                std::process::exit(1);\n            }\n        }\n    });\n\n    iota.subscriber()\n        .with_topics(vec![Topic::new("milestones/latest")?, Topic::new("messages")?])\n        .subscribe(move |event| {\n            match event.topic.as_str() {\n                "messages" => {\n                    let message: Message = serde_json::from_str(&event.payload).unwrap();\n                    println!("{:?}", event);\n                    println!("{:?}", message);\n                }\n                _ => println!("{:?}", event),\n            }\n            tx.lock().unwrap().send(()).unwrap();\n        })\n        .await\n        .unwrap();\n\n    for i in 0..10 {\n        rx.recv().unwrap();\n        if i == 7 {\n            // unsubscribe from topic "messages", will continue to receive events for "milestones/latest"\n            iota.subscriber()\n                .with_topics(vec![Topic::new("messages")?])\n                .unsubscribe()\n                .await?;\n        }\n    }\n\n    iota.subscriber().disconnect().await?;\n    // alternatively\n    // iota.subscriber().unsubscribe().await?;\n    Ok(())\n}\n\n')),(0,i.kt)("p",null,"You can find more advanced examples in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/iota.rs/tree/dev/examples"},"examples")," folder."))}p.isMDXComponent=!0}}]);